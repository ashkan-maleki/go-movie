ARG service
FROM golang:1.20-alpine AS builder
ARG service

WORKDIR /movie

# Retrieve application dependencies.
# This allows the container build to reuse cached dependencies.
# Expecting to copy go.mod and if present go.sum.
COPY go.* ./
RUN go mod download

# Copy local code to the container image.
COPY ../.. ./

RUN #sed -i -e 's/v[[:digit:]]\..*\//edge\//g' /etc/apk/repositories
RUN #apk upgrade --update-cache --available
RUN apk update && apk --no-cache add gcc libc-dev
RUN #apk update && apk --no-cache add git
RUN #apk --no-cache add build-essential
RUN #apk --no-cache add pkg-config
RUN #apk add --no-cache gcc

# Build the binary.
RUN CGO_ENABLED=1 go build -tags musl -ldflags="-s -w" -v -o service ./${service}/cmd/

ARG service
FROM alpine:latest AS runtime
ARG service

#COPY --from=builder /mallbots/docker/wait-for .
#RUN chmod +x /wait-for

#RUN apk upgrade --update-cache --available
#RUN apk update
#RUN apk update && apk add --no-cache gcc libc-dev
#RUN apk add --no-cache librdkafka-dev=1.3.0-r0 pkgconf

# Copy the binary to the production image from the builder stage.
COPY --from=builder /movie/service /movie/service
#COPY ../${service}/configs/base.yaml /movie/base.yaml

CMD [ "/movie/service" ]
#CMD ["ls", "/movie/service"]
